@page "/register"
@using System.ComponentModel.DataAnnotations;
@using MudBlazor



@if (Errors.Any())
{
    foreach (var error in Errors)
    {
        _snackBar.Add($"{error}", Severity.Error);
    }
}


<MudContainer MaxWidth="MaxWidth.Small" Class="absolute" Style="top:50%;left:50%;margin-right:-50%;transform:translate(-50%, -50%)">
    <MudPaper Square="false" Outlined="true" Class="pa-4" Style="margin:auto; border-top: 5px solid #05CC12">
        <MudGrid>
            <MudItem xs="12">
                <MudContainer Class="d-flex align-center justify-center">
                    <MudImage Width="150" Height="100" Src="images/logo.png"></MudImage>
                </MudContainer>
            </MudItem>
            <MudItem xs="12">
                <MudContainer Class="d-flex justify-center">
                    <h2>Registrar-se</h2>
                </MudContainer>
            </MudItem>
            <MudItem xs="12">
                <MudForm @bind-IsValid="@bindIsValid" @bind-Model="@RegisterModel">
                    <MudFocusTrap>
                        <MudTextField Label="Nome" Required="true"
                                      OnlyValidateIfDirty="true"
                                      Variant="Variant.Outlined"
                                      RequiredError="Nome é necessário."
                                      @bind-Value="RegisterModel.Nome"/>
                        <MudTextField Label="Sobrenome" Required="true"
                                      OnlyValidateIfDirty="true"
                                      Variant="Variant.Outlined"
                                      RequiredError="Sobrenome é necessário."
                                      @bind-Value="RegisterModel.Sobrenome"/>
                        <MudTextField Label="Email" Required="true"
                                      OnlyValidateIfDirty="true"
                                      Variant="Variant.Outlined"
                                      RequiredError="E-mail é necessário."
                                      @bind-Value="RegisterModel.Email"
                                      Validation="@(new EmailAddressAttribute() { ErrorMessage = "O e-mail não é válido" })"/>

                        <MudTextField Label="Senha" @bind-Value="RegisterModel.Senha" Required="true" 
                                      InputType="PasswordInput" Variant="Variant.Outlined"
                                      For="(() => RegisterModel.Senha)"
                                      RequiredError="Senha é necessária." OnlyValidateIfDirty="true" Adornment="Adornment.End"
                                      AdornmentIcon="@PasswordInputIcon" AdornmentAriaLabel="Mostrar senha" 
                                      OnAdornmentClick="PasswordIconClick"/>
                        <MudTextField Label="Repita a senha" @bind-Value="RegisterModel.ConfirmaSenha" Required="true" 
                                      InputType="PasswordInput" Variant="Variant.Outlined"
                                      RequiredError="Repetir a senha é necessário." OnlyValidateIfDirty="true" 
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@PasswordInputIcon" AdornmentAriaLabel="Mostrar senha" 
                                      OnAdornmentClick="PasswordIconClick"
                                      Validation="@(new Func<string, string>(PasswordMatch))"/>
                    </MudFocusTrap>
                </MudForm>

            </MudItem>
            @if (isValidatingSubmit)
            {
                <MudContainer Class="mt-2 d-flex align-items-center justify-center">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
                </MudContainer>
            }
            <MudItem xs="12">
                <MudButton Disabled="@(!bindIsValid)" OnClick="HandleRegister" Variant="Variant.Filled" FullWidth="true" Class="green accent-3 rounded-pill">
                    <MudText Typo="Typo.h6" Class="shades-text text-white">Registrar-se</MudText>
                </MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="false">
                    <MudText Typo="Typo.body2">Após registrar-se o seu usuário será: <strong>{nome}.{sobrenome}</strong> (tudo junto e minúsculo)</MudText>
                    <MudText Typo="Typo.body2">Usuário administrador: admin - Senha: 123456</MudText>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudContainer>
                    <MudLink Href="/login">
                        <MudText Align="Align.Center" Class="blue-grey-text text-darken-1">Ir para Login</MudText>
                    </MudLink>
                </MudContainer>
            </MudItem>

        </MudGrid>
    </MudPaper>

</MudContainer>

@code {
    bool bindIsValid;
    private RegisterRequest RegisterModel = new RegisterRequest();
    private bool ShowErrors;
    private List<String> Errors = new();
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    bool isShow;
    bool isValidatingSubmit;


    private async Task HandleRegister()
    {
        Errors.Clear();
        isValidatingSubmit = true;

        if (!bindIsValid)
        {
            isValidatingSubmit = false;
            return;
        }

        var result = await _authenticationManager.Register(RegisterModel);
        if (result.Succeeded)
        {
            _snackBar.Add("Registrado com sucesso", Severity.Success);
            await Task.Delay(2000);
            _navigationManager.NavigateTo("/login");
        }
        else
        {
            Errors = result.Messages;
        }


        isValidatingSubmit = false;
    }

    private string PasswordMatch(string arg)
    {
        if (RegisterModel.Senha != arg)
            return "As senhas não são iguais";
        return null;
    }

    void PasswordIconClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

}